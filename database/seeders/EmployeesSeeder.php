<?php

namespace Database\Seeders;

use App\Enums\Role;
use App\Models\{Company\Company, Employee\Employee, Owner\Owner, User\User};
use App\Repositories\Permission\PermissionRepository;
use Illuminate\Database\Seeder;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

class EmployeesSeeder extends Seeder
{
    /**
     * Permission container property.
     *
     * @var array
     */
    private array $permissions = [];

    /**
     * Run the database seeds.
     *
     * @return Employee
     */
    private function generateEmployee(): Employee
    {
        // Decide the owner email counter
        $counter = User::where('email', 'like', 'employee%')->count();
        $counter++;

        // Find the company of the employee, if not found randomise
        $ownerEmail = 'owner' . $counter . '@flexavi.nl';
        $company = Owner::with('company')
            ->whereHas('user', function ($userQuery) use ($ownerEmail) {
                return $userQuery->whereEmail($ownerEmail);
            })->first()?->company ?: Company::inRandomOrder()->first();

        $employeeUser = User::factory()->create([
            'fullname' => 'Flexavi Employee ' . $counter,
            'email' => 'employee' . $counter . '@flexavi.nl',
            'password' => bcrypt('employee' . $counter),
        ]);

        // Assign Employee user with needed permissions
        $employeeUser->syncRoles([Role::Employee]);
        $permissions = collect($this->permissions)
            ->take(5)
            ->toArray();
        $permissions[] = 'access dashboard';
        $employeeUser->syncPermissions($permissions);

        $contractFilePath = "employees/contracts";
        Storage::deleteDirectory($contractFilePath);
        Storage::makeDirectory($contractFilePath);
        $contractFile = \Illuminate\Http\UploadedFile::fake()
            ->create('employment_contract.pdf', 100)
            ->store($contractFilePath);

        // Clean up factory auto-generated record
        if ($autoGeneratedOwner = $employeeUser->owner) {
            Owner::whereUserId($autoGeneratedOwner->user_id)->forceDelete();
            Company::whereId($autoGeneratedOwner->company_id)->forceDelete();
        }
        if ($autoGeneratedEmployee = $employeeUser->employee) {
            Employee::whereUserId($autoGeneratedEmployee->user_id)->forceDelete();
            Company::whereId($autoGeneratedOwner->company_id)->forceDelete();
        }

        return Employee::factory()->for($company)->for($employeeUser)->create([
            'user_id' => $employeeUser->id,
            'company_id' => $company->id,
            'contract_file_path' => str_replace(
                "employees/",
                "",
                $contractFile,
            ),
        ]);
    }

    /**
     * Seed Employees to given companies.
     *
     * @param int $quantity without main Employee.
     * @return void
     */
    private function seedEmployees(int $quantity = 5): void
    {
        // Generate other Employees
        foreach (range(0, $quantity - 1) as $iteration) {
            $this->generateEmployee();
        }
    }

    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run(): void
    {
        $this->permissions = app(PermissionRepository::class)->permissionNames();

        $this->seedEmployees(30);
    }
}
